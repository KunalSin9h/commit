#!/bin/bash

# Reset
Color_Off=''

# Regular Colors
Red=''
Green=''
Yellow=''
Cyan=''
Magenta=''
Dim='' # White

# Bold
Bold_White=''
Bold_Green=''

if [[ -t 1 ]]; then
    # Reset
    Color_Off='\033[0m' # Text Reset

    # Regular Colors
    Red='\033[0;31m'   # Red
    Green='\033[0;32m' # Green
    Yellow='\033[1;33m' # Yellow
    Cyan='\033[0;36m'
    Magenta='\033[1;35m'
    Dim='\033[0;2m'    # White

    # Bold
    Bold_Green='\033[1;32m' # Bold Green
    Bold_White='\033[1m'    # Bold White
fi

COMMIT_TYPE=$(gum choose "fix" "feat" "docs" "style" "refactor" "test" "chore" "revert" --cursor.foreground "#5fd7d7")
SCOPE=$(gum input --cursor.foreground "#5fd7d7" --placeholder "scope")

# Since the scope is optional, wrap it in parentheses if it has a value.
test -n "$SCOPE" && SCOPE="($SCOPE)"

# Pre-populate the input with the type(scope): so that the user may change it
SUMMARY=$(gum input --cursor.foreground "#5fd7d7" --value "$COMMIT_TYPE$SCOPE: " --placeholder "Summary of this change")
DESCRIPTION=$(gum write --cursor.foreground "#5fd7d7" --placeholder "Details of this change (CTRL+D to finish)")

# Commit these changes
gum confirm "Commit changes?" --selected.background="80" && git commit -m "$SUMMARY" -m "$DESCRIPTION" && (echo -e "${Bold_Green}Successfully Commit${Color_Off}")
